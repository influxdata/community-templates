apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: telegraf
spec:
    name: Telegraf
    charts:
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat
        name: Agent - Metrics Gathered
        queries:
          - query: |-
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "metrics_gathered")
        width: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Agent - Metrics gathered vs written per second
        position: overlaid
        queries:
          - query: |-
                import "experimental/aggregate"
                  from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "metrics_gathered" or r._field == "metrics_written")
                  |> aggregate.rate(every: v.windowPeriod, unit: 1s, groupColumns: ["_field"])
        width: 4
        xCol: _time
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: y
            scale: linear
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: step
        height: 3
        kind: Xy
        name: Inputs - metrics gathered per input per minute
        position: overlaid
        queries:
          - query: |-
                import "experimental/aggregate"
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_gather")
                  |> filter(fn: (r) => r._field == "metrics_gathered")
                  |> derivative(unit: v.windowPeriod, nonNegative: true, columns: ["_value"], timeColumn: "_time")
                  |> aggregateWindow(every: duration(v: int(v: v.windowPeriod) * 6), fn: sum)
        width: 4
        xCol: _time
        yCol: _value
        yPos: 6
      - axes:
          - base: "10"
            name: y
            scale: linear
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Output - Write buffer size
        position: overlaid
        queries:
          - query: |-
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_write")
                  |> filter(fn: (r) => r._field == "buffer_size")
                  |> aggregateWindow(every: v.windowPeriod, fn: max)
        width: 4
        xCol: _time
        yCol: _value
        yPos: 9
      - axes:
          - base: "10"
            name: y
            scale: linear
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 2
        kind: Xy
        name: memory allocations
        position: overlaid
        queries:
          - query: |-
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_memstats")
                  |> filter(fn: (r) => r._field == "mallocs")
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> yield(name: "nonnegative derivative")
        width: 4
        xCol: _time
        yCol: _value
        yPos: 12
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat
        name: Agent - Metrics Written
        queries:
          - query: |-
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "metrics_written")
        width: 3
        xPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Agent - input plugin errors
        position: overlaid
        queries:
          - query: |-
                import "experimental/aggregate"
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "gather_errors")
                  |> group()
                  |> aggregateWindow(every: v.windowPeriod, fn: sum)
                  |> derivative(unit: v.windowPeriod, nonNegative: true, columns: ["_value"], timeColumn: "_time")
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Inputs - Errors per input
        position: overlaid
        queries:
          - query: |-
                import "experimental/aggregate"
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_gather")
                  |> filter(fn: (r) => r._field == "errors")
                  |> aggregateWindow(every: v.windowPeriod, fn: sum)
                  |> derivative(unit: v.windowPeriod, nonNegative: true, columns: ["_value"], timeColumn: "_time")
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 6
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Output - Errors per output
        position: overlaid
        queries:
          - query: |-
                import "experimental/aggregate"
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_write")
                  |> filter(fn: (r) => r._field == "errors")
                  |> aggregateWindow(every: v.windowPeriod, fn: max)
                  |> derivative(unit: v.windowPeriod, nonNegative: true, columns: ["_value"], timeColumn: "_time")
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 9
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "2"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 2
        kind: Xy
        name: Garbage Collection
        position: overlaid
        queries:
          - query: |-
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_memstats")
                  |> filter(fn: (r) => r._field == "num_gc")
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> yield(name: "nonnegative derivative")
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 12
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 3
        kind: Single_Stat_Plus_Line
        name: Errors
        position: overlaid
        queries:
          - query: "from(bucket: \"Telegraf\")\n  |> range(start: v.timeRangeStart,
                stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"internal_write\"
                or r._measurement == \"internal_agent\")\n  |> filter(fn: (r) => r._field
                == \"errors\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean)
                \ \n  |> derivative(unit: v.windowPeriod, nonNegative: true, columns:
                [\"_value\"], timeColumn: \"_time\")"
        width: 3
        xCol: _time
        xPos: 6
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Agent - Metrics Dropped
        position: overlaid
        queries:
          - query: |-
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "metrics_dropped")
                  |> group()
                  |> aggregateWindow(every: v.windowPeriod, fn: sum)
                  |> derivative(unit: v.windowPeriod, nonNegative: true, columns: ["_value"], timeColumn: "_time")
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
            suffix: ' ms'
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Inputs - Time to gather metrics
        position: overlaid
        queries:
          - query: |-
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_gather")
                  |> filter(fn: (r) => r._field == "gather_time_ns")
                  |> map(fn: (r) => ({ r with _value: r._value / 1000000 }))
                  |> aggregateWindow(every: v.windowPeriod, fn: max)
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
        yPos: 6
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: Seconds
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Outputs - Write time
        position: overlaid
        queries:
          - query: |-
                import "date"
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_write")
                  |> filter(fn: (r) => r._field == "write_time_ns")
                  |> aggregateWindow(every: v.windowPeriod, fn: max)
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
        yPos: 9
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 2
        kind: Xy
        name: Heap Memory in use
        position: overlaid
        queries:
          - query: |-
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_memstats")
                  |> filter(fn: (r) => r._field == "heap_in_use_bytes")
        width: 4
        xPos: 8
        yPos: 12
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 3
        kind: Single_Stat_Plus_Line
        name: Agent - Metrics dropped
        position: overlaid
        queries:
          - query: |-
                import "experimental/aggregate"
                import "experimental/query"
                from(bucket: "Telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._field == "metrics_dropped")
                  |> aggregate.rate(every: v.windowPeriod, unit: 1s)
                  |> aggregateWindow(every: v.windowPeriod, fn: sum)
        width: 3
        xCol: _time
        xPos: 9
        yCol: _value
    description: ""
---
apiVersion: influxdata.com/v2alpha1
kind: Telegraf
metadata:
    name: telegraf-internal-monitoring
spec:
    name: Telegraf Internal Monitoring
    config: |
        [agent]
          interval = "10s"
          round_interval = true
          metric_batch_size = 1000
          metric_buffer_limit = 10000
          collection_jitter = "0s"
          flush_interval = "10s"
          flush_jitter = "0s"
          precision = ""
          omit_hostname = false

        [[inputs.internal]]
          collect_memstats = true
        
        [[outputs.influxdb_v2]]
          urls = ["${INFLUX_HOST}"]
          token = "${INFLUX_TOKEN}"
          organization = "${INFLUX_ORG}"
          ## Destination bucket to write into.
          bucket = "${TELEGRAF_BUCKET}"
    description: A set of plugins for monitoring your Linux system.  
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: telegraf
spec:
    name: Telegraf
    retentionRules:
      - everySeconds: 604800
        type: expire
